---
import Container from '@components/Container.astro';
import Hero from '@components/Hero.astro';
import directus from '@directus/directus';
import { readItems, readSingleton } from '@directus/sdk';
import EventGrid from '@components/EventGrid.astro';

import BaseLayout from '@layouts/BaseLayout.astro';
import getPageHero from '@utils/getPageHero';
import getPageSeo from '@utils/getPageSeo';
import { getImage } from 'astro:assets';
import getAssetUrl from '@utils/getAssetUrl';

const global = await directus.request(readSingleton('General'));

type Event = {
	id: string;
	name: string;
	description?: string;
	image?: string;
	start_date: Date;
	end_date: Date;
	url: string;
	location: string;
};

async function getEvents() {
	const responses = await directus.request<Event[]>(
		readItems('events', {
			fields: [
				'id',
				'name',
				'description',
				'image',
				'start_date',
				'end_date',
				'url',
				'location',
			],
			sort: ['-start_date'],
		})
	);
	const events: Event[] = responses.map((res) => ({
		id: res.id,
		name: res.name,
		description: res.description,
		image: res.image,
		start_date: new Date(res.start_date),
		end_date: new Date(res.end_date),
		url: res.url,
		location: res.location,
	}));

	const imagePromises = events.map(({ image, ...rest }) => {
		return new Promise((resolve) => {
			getImage({
				src: getAssetUrl(image),
				width: 400,
				height: 200,
				fit: 'cover',
			}).then((fetchedImage) =>
				resolve({
					image: fetchedImage?.src,
					...rest,
				})
			);
		});
	});

	const eventsWithImages = await Promise.all(imagePromises);
	return eventsWithImages as Event[];
}

const page = Astro.props;

const pageHero = await getPageHero('events');
const pageSeo = await getPageSeo('events');
const events = await getEvents();
---

<script>
	const today = new Date();
</script>

<BaseLayout
	title={`${pageHero.title} | ${global.site_name} - ${global.site_subheader}`}
	seo={pageSeo}
>
	<Hero pageHero={pageHero} parent={page.parent} />
	<Container>
		<div class="my-24">
			<h1 class="text-center text-3xl font-semibold">
				Current and Future Events
			</h1>
			<EventGrid
				client:load
				events={events
					.filter((ev) => ev.end_date.getTime() >= new Date().getTime())
					.sort((a, b) => a.start_date.getTime() - b.start_date.getTime())}
			/>
		</div>
		<div class="my-24">
			<h1 class="text-center text-3xl font-semibold">Past Events</h1>
			<EventGrid
				client:load
				events={events.filter(
					(ev) => ev.end_date.getTime() < new Date().getTime()
				)}
			/>
		</div>
	</Container>
</BaseLayout>
