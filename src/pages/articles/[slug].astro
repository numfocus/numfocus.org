---
import Button from '@components/Atoms/Button';
import Container from '@components/Container.astro';
import Hero from '@components/Hero.astro';
import BodyContent from '@components/TipTapRender/BodyContent';
import { TipTapRender } from '@components/TipTapRender/TipTapRender';
import directus from '@directus/directus';
import { readItem, readItems, withToken } from '@directus/sdk';
import SingleArticleLayout from '@layouts/SingleArticleLayout.astro';
import getPageStub from '@utils/getPageStub';
import hydrateFlexibleEditorContent from '@utils/hydrateFlexibleEditorContent';
import { injectDataIntoContent } from 'directus-extension-flexible-editor/content';
import type { Page, PageHero } from 'env';

const parent = await getPageStub('articles');

// TODO: #59 explore live preview -- https://directus.io/docs/tutorials/getting-started/implementing-live-preview-in-astro
// this prerender is prerequisite for live preview
// export const prerender = false;

export async function getStaticPaths() {
  const posts = await directus.request(
    readItems('articles', {
      fields: [
        'id',
        'title',
        'slug',
        'body_content',
        'editor_nodes.id',
        'editor_nodes.collection',
        'hero.item.heading',
        'hero.item.content',
        'hero.item.image',
        'seo',
        { editor_nodes: ['*.*.*.*'] },
      ],
    })
  );

  const cleanPostsPromises = posts.map(async (post) => {
    const editorNodes = await hydrateFlexibleEditorContent(post);
    injectDataIntoContent(editorNodes, post.body_content);

    return post;
  });

  const cleanPosts = await Promise.all(cleanPostsPromises)

  return cleanPosts.map((page) => ({
    params: { slug: page.slug },
    props: page,
  }));
}

// this block is live preview content from Directus blog, adapted to our needs
// const params = Astro.url.searchParams;
// const preview = params.get('preview');
// const id = Astro.url.pathname.split('/').pop();
// const token = params.get('token');
// const version = params.get('version');

// console.log(id);
// console.log(Astro.url.searchParams.get('test'));

// let page: { [x: string]: any } = {};
// if (preview) {
//   const page = async () => {
//     const payload = await directus.request(
//       readItem('articles', id as string, {
//         fields: [
//           'id',
//           'title',
//           'slug',
//           'body_content',
//           'editor_nodes.id',
//           'editor_nodes.collection',
//           'hero.item.heading',
//           'hero.item.content',
//           'hero.item.image',
//           'seo',
//           { editor_nodes: ['*.*.*.*'] },
//         ],
//         ...(version && { version }),
//       })
//     );
//     injectDataIntoContent(payload.editor_nodes, payload.body_content);
//     return payload;
//   };
//   console.log(page);
// } else {
//   page = Astro.props;
// }

const page = Astro.props;
---

<SingleArticleLayout
  title={page.title}
  seo={{
    title: page.seo?.title || page.title,
    meta_description: page.seo?.meta_description || '',
    og_image: page.seo?.og_image || '',
  }}
>
  <Hero
    pageHero={{
      id: page.id,
      title: page.title,
      headline: page.hero[0].item.heading,
      rich_text: page.hero[0].item.content,
      image: page.hero[0].item.image,
      hero_style: 'light',
    }}
    parent={parent as Page}
  />
  <div class="mt-24 overflow-auto">
    <TipTapRender handlers={BodyContent} node={page.body_content} />
  </div>
</SingleArticleLayout>
