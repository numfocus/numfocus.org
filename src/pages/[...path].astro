---
import Container from '@components/Container.astro';
import Hero from '@components/Hero.astro';
import directus from '@directus/directus';
import { readItems, readSingleton } from '@directus/sdk';
import hydrateFlexibleEditorContent from '@utils/hydrateFlexibleEditorContent';
import { injectDataIntoContent } from 'directus-extension-flexible-editor/content';

import type { TipTapNode } from '@components/TipTapRender';
import BodyContent from '@components/TipTapRender/BodyContent';
import { TipTapRender } from '@components/TipTapRender/TipTapRender';
import BaseLayout from '@layouts/BaseLayout.astro';
import getPageHero from '@utils/getPageHero';
import getPagePath from '@utils/getPagePath';
import getPageSeo from '@utils/getPageSeo';
import type { Page } from 'env';

const global = await directus.request(readSingleton('General'));

export async function getStaticPaths() {
  const pages = await directus.request(
    readItems('pages', {
      fields: [
        'id',
        'title',
        'slug',
        'body_content',
        'editor_nodes.id',
        'editor_nodes.collection',
        'parent.*.*.*.*.*',
        { editor_nodes: ['*.*.*.*.*.*.*.*'] },
      ],
    })
  );

  const cleanPagesPromises = pages.map(async (page) => {
    const editorNodes = await hydrateFlexibleEditorContent(page);
    injectDataIntoContent(editorNodes, page.body_content);

    return page;
  });

  const cleanPages = await Promise.all(cleanPagesPromises)

  return cleanPages.map((page) => {
    const path = getPagePath(page as Page);

    return {
      params: { path },
      props: page,
    };
  });
}

const page = Astro.props;

const pageHero = await getPageHero(page.slug);
const pageSeo = await getPageSeo(page.slug);
---

<BaseLayout
  title={`${pageHero.title} | ${global.site_name} - ${global.site_subheader}`}
  seo={pageSeo}
>
  <Hero pageHero={pageHero} parent={page.parent} />
  {
    !!page.body_content && (
      <div>
        <TipTapRender
          handlers={BodyContent}
          node={page.body_content as TipTapNode}
        />
      </div>
    )
  }
  <Container />
</BaseLayout>
