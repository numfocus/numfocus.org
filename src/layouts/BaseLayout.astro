---
// This is the main layout file; all other layouts are enclosed in this one

import { Font } from 'astro:assets';
import Footer from '@components/layout/Footer.astro';
import Navbar from '@components/layout/Navbar.astro';
import getAssetUrl from '@utils/getAssetUrl';
import { SEO } from 'astro-seo';
import type { Seo } from 'env';
import '@styles/global.css';

interface Props {
  title: string;
  seo: Seo;
}

const { title, seo } = Astro.props;
---

<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <title>{title}</title>
    <link rel="icon" type="image/svg+xml" href="/favicon.png" />
    <meta name="generator" content={Astro.generator} />
    <Font cssVariable="--font-lato" preload />
    <Font cssVariable="--font-pt-sans-caption" preload />
    <!-- SEO module -->
    <SEO
      title={seo.title}
      description={seo.meta_description}
      openGraph={{
        basic: {
          title: seo.title,
          type: 'website',
          image: getAssetUrl(seo.og_image),
          url: Astro.url,
        },
      }}
    />
    <!-- End SEO module -->
  </head>
  <body>
    <Navbar />
    <main class="">
      <slot />
    </main>
    <Footer />
  </body>
</html>

<!-- TODO: #47 conditional logic for the intersection observer -->
<script is:inline>
  const observer = new IntersectionObserver(
    (entries) => {
      for (const entry of entries) {
        const headingFragment = `#${entry.target.id}`;
        const tocItem = document.querySelector(`a[href="${headingFragment}"]`);

        if (entry.isIntersecting) {
          const previouslyActivatedItem =
            document.querySelector('.active-toc-item');

          previouslyActivatedItem?.classList.remove('active-toc-item');
          tocItem.parentElement.classList.add('active-toc-item');
        } else {
          const isAnyOtherEntryIntersecting = entries.some(
            (e) => e.target.id !== entry.target.id && e.isIntersecting
          );

          if (isAnyOtherEntryIntersecting) {
            tocItem.parentElement.classList.remove('active-toc-item');
          }
        }
      }
    },
    { root: null, rootMargin: '0px', threshold: [1] }
  );

  const sectionHeadings = document.querySelectorAll('section.toc-content h4');

  for (const heading of sectionHeadings) {
    observer.observe(heading);
  }
</script>
